#!/usr/local/bin/octave -qf
##
## Copyright (C) 2014, 2015 CarnÃ« Draug <carandraug+dev@gmail.com>
##
## This program is free software; you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation; either version 3 of the License, or
## (at your option) any later version.
##
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program; if not, see <http://www.gnu.org/licenses/>.

pkg load image;
pkg load statistics;

page_output_immediately (1);
more ("off");

graphics_toolkit ("qt");
set (0, "defaultfigurevisible", "off");

## We should fix regionprops instead of implementing it here
function props = area_and_centroids (cc, im)
  Area = cellfun (@numel, cc.PixelIdxList);

  no = cc.NumObjects;
  sz = cc.ImageSize;
  nd = numel (sz);
  rn = 1:no;
  R  = [rn; Area];

  idx = cell2mat (cc.PixelIdxList(:));
  sub = cell2mat (nthargout (1:nd, @ind2sub, sz, idx));

  vals = im(idx);
  subs = vec (repelems (rn, [rn; Area]));

  totals = repelems (accumarray (subs, vals), R);
  weighted_sub = sub .* (double (vals) ./ vec (totals));
  weighted_cen = accumarray (vec (repmat (subs, [1 nd]) .+ [0:no:(no*nd-1)]),
                             vec (weighted_sub), [no nd]);

  ## Swap X and Y coordinates for Matlab compatibility
  weighted_cen(:,[1 2]) = weighted_cen(:,[2 1]);

  props = struct ("Area", Area, "WeightedCentroid", weighted_cen);
endfunction

function dapi_mask_clean = get_dapi_mask (dapi)
  se_2d = strel ("disk", 3, 0);
  se_3d = strel ("arbitrary", repmat (getnhood (se_2d), [1 1 3]));

  dapi_mask = im2bw (imdilate (dapi, se_3d), graythresh (dapi(:)));
  dapi_mask = bwfill (dapi_mask, "holes", 8);
  dapi_mask = reshape (dapi_mask, size (dapi));
  dapi_mask = imclose (dapi_mask, se_2d);

  dapi_mask_clean = bwareaopen (dapi_mask, 10000, ones (3, 3));
endfunction

function [centroids, r_area] = get_centroids (im, mask)
  if (! isinteger (im))
    ## we could just use abs() but if data is floating point, we may
    ## be sure we are not messing up something.
    error ("Data is not integer class");
  endif

  bw = im2bw (im, graythresh (im(mask)));
  im(! bw | ! mask) = 0;
  imc = imcomplement (im);
  seg = watershed (imc);
  im = imcomplement (imc);
  im(! seg) = 0;
  bw = bwareaopen (logical (im), 10);
  cc = bwconncomp (bw);

  props = area_and_centroids (cc, im);

  centroids = cell2mat({props(:).WeightedCentroid}(:));
  r_area = [props(:).Area];
endfunction

## Note that centroids coordinates are [x, y, z]
function m = centroids_mask (centroids, dims)
  m   = false (dims);
  cr  = round (centroids);
  ind = sub2ind (dims, cr(:,2), cr(:,1), repmat (1, rows (cr), 1), cr(:,4));
  m(ind) = true;
endfunction

function annotate_stats (coord, dists)
  ## Mutiple calls to annotation instead of a multi-line annotation to
  ## workaround https://savannah.gnu.org/bugs/?31468
  annotation ("textbox", coord, "LineStyle", "none",
              "String", sprintf ("std     %f", std (dists)));
  coord(2) += 0.05;
  annotation ("textbox", coord, "LineStyle", "none",
              "String", sprintf ("mean    %f", mean (dists)));
  coord(2) += 0.05;
  annotation ("textbox", coord, "LineStyle", "none",
              "String", sprintf ("median  %f", median (dists)));
  coord(2) += 0.05;
  annotation ("textbox", coord, "LineStyle", "none",
              "String", sprintf ("N       %i", numel (dists)));
endfunction

##
## Main
##

if (isempty (argv ()))
  [fname, fpath] = uigetfile ({"*.tif;*.tiff", "TIFF-files"},
                              "Select images",
                              "MultiSelect", "on");
  if (isequal (fname, 0))
    error ("No files selected");
  else
    fpaths = fullfile (fpath, fname);
    if (! iscell (fpaths))
      fpaths = {fpaths};
    endif
  endif
else
  fpaths = argv ();
end

nFiles = numel (fpaths);

set (waitbar (0, "Computing NNA"), "visible", "on");
for fidx = 1:nFiles
  waitbar ((fidx -1)/ nFiles);
  fpath = fpaths{fidx};
  [fdir, fname] = fileparts (fpath);

  csv1_fpath = fullfile (fdir, [fname "-data_1.csv"]);
  csv2_fpath = fullfile (fdir, [fname "-data_2.csv"]);
  plot_fpath = fullfile (fdir, [fname "-boxplot.pdf"]);

  im    = imread (fpath, "Index", "all");
  dapi  = im(:,:,:,1:3:end);
  chan1 = im(:,:,:,2:3:end);
  chan2 = im(:,:,:,3:3:end);

  dapi_mask = get_dapi_mask (dapi);

  [cen1, cen1_area] = get_centroids (chan1, dapi_mask);
  [cen2, cen2_area] = get_centroids (chan2, dapi_mask);

  mlog = cat (3, im2uint8 (chan1),
                 im2uint8 (centroids_mask (cen1, size (dapi_mask))),
                 im2uint8 (chan2),
                 im2uint8 (centroids_mask (cen2, size (dapi_mask))),
                 im2uint8 (dapi),
                 im2uint8 (dapi_mask));
  mlog_size = size (mlog);
  mlog = reshape (mlog, [mlog_size(1:2) 1 prod(mlog_size(3:4))]);
  imwrite (mlog, fullfile (fdir, [fname "-log.tif"]));

  ## Remove coordinates to singleton dimension 3
  cen1(:,3) = [];
  cen2(:,3) = [];

  cen1 .*= [39.5 39.5 125];
  cen2 .*= [39.5 39.5 125];

  [nn_dist_1to2, nn_idx_1to2] = min (pdist2 (cen2, cen1, "sqeuclidean"));
  nn_dist_1to2 = sqrt (nn_dist_1to2);

  [nn_dist_2to1, nn_idx_2to1] = min (pdist2 (cen1, cen2, "sqeuclidean"));
  nn_dist_2to1 = sqrt (nn_dist_2to1);

  fid = fopen (csv1_fpath, "w");
  fprintf (fid, "x, y, z, NN_dist, NN_idx, n_voxels\n");
  fclose (fid);
  csvwrite (csv1_fpath, [cen1 nn_dist_1to2(:) nn_idx_1to2(:) cen1_area(:)],
            "-append");

  fid = fopen (csv2_fpath, "w");
  fprintf (fid, "x, y, z, NN_dist, NN_idx, n_voxels\n");
  fclose (fid);
  csvwrite (csv2_fpath, [cen2 nn_dist_2to1(:) nn_idx_2to1(:) cen2_area(:)],
            "-append");

  h = figure ();
  boxplot ({nn_dist_1to2(:) nn_dist_2to1(:)});
  set (gca (), "xtick", [1 2], "xticklabel", {"1 to 2", "2 to 1"});


  annotate_stats ([0.2 0.7 1 1], nn_dist_1to2(:));
  annotate_stats ([0.7 0.7 1 1], nn_dist_2to1(:));
  print (plot_fpath);
  close (h);

endfor

